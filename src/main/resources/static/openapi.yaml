openapi: 3.0.3
info:
  title: Gestión de Cuentas Bancarias
  version: 1.0.0
  description: API para la gestión de clientes y sus cuentas bancarias.
servers:
  - url: http://localhost:8080
    description: Servidor local

paths:
  /clientes:
    get:
      tags:
        - clientes
      summary: Lista de todos los clientes con sus datos personales y cuentas bancarias
      operationId: getAllClientes
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Cliente' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /clientes/mayores-de-edad:
    get:
      tags:
        - clientes
      summary: Listar clientes mayores de edad
      operationId: getClientesMayoresDeEdad
      responses:
        '200':
          description: Lista de clientes adultos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Cliente' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /clientes/con-cuenta-superior-a/{cantidad}:
    get:
      tags:
        - clientes
      summary: Listar clientes con cuentas superiores a una cantidad
      operationId: getClientesConCuentaSuperiorA
      parameters:
        - name: cantidad
          in: path
          required: true
          schema:
            type: number
            format: double
            minimum: 0
      responses:
        '200':
          description: Lista filtrada
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Cliente' }
        '400':
          description: Parámetro inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /clientes/{dni}:
    get:
      tags:
        - clientes
      summary: Obtener cliente por DNI
      operationId: getClienteByDni
      parameters:
        - name: dni
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Cliente' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        '404':
          description: Cliente no encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /cuentas:
    post:
      tags:
        - cuentas
      summary: Dar de alta una nueva cuenta bancaria para un cliente
      operationId: createCuenta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCuentaBancariaRequest'
      responses:
        '201':
          description: Cuenta creada
          headers:
            Location:
              description: URL del recurso creado
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CuentaBancaria' }
        '400':
          description: Petición inválida
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

  /cuentas/{idCuenta}:
    put:
      tags:
        - cuentas
      summary: Actualizar el total de una cuenta bancaria
      operationId: updateCuentaTotal
      parameters:
        - name: idCuenta
          in: path
          required: true
          schema: { type: integer, format: int64, minimum: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCuentaBancariaRequest'
      responses:
        '204':
          description: Cuenta actualizada
        '400':
          description: Petición inválida
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }
        '404':
          description: Cuenta no encontrada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiError' }

components:
  schemas:
    Cliente:
      type: object
      required: [dni, nombre, apellido1, apellido2, fechaNacimiento]
      properties:
        dni: { type: string, example: "11111111A" }
        nombre: { type: string, example: "Juan" }
        apellido1: { type: string, example: "Pérez" }
        apellido2: { type: string, example: "López" }
        fechaNacimiento: { type: string, format: date, example: "1959-09-12" }
        cuentas:
          type: array
          items: { $ref: '#/components/schemas/CuentaBancaria' }

    CuentaBancaria:
      type: object
      properties:
        id: { type: integer, format: int64, example: 1 }
        tipoCuenta: { type: string, example: "PREMIUM" }
        total: { type: number, format: double, example: 150000, minimum: 0 }

    CreateCuentaBancariaRequest:
      type: object
      required: [dniCliente, tipoCuenta, total]
      properties:
        dniCliente: { type: string, example: "11111111A" }
        tipoCuenta: { type: string, example: "NORMAL" }
        total: { type: number, format: double, example: 50000, minimum: 0 }

    UpdateCuentaBancariaRequest:
      type: object
      required: [total]
      properties:
        total: { type: number, format: double, example: 180000, minimum: 0 }

    ApiError:
      type: object
      required: [status, mensaje]
      properties:
        status:
          type: integer
          example: 400
        mensaje:
          type: string
          example: "Error de validación en los datos enviados"
        detalles:
          type: array
          items: { $ref: '#/components/schemas/ApiParamErrorField' }

    ApiParamErrorField:
      type: object
      properties:
        field: { type: string, example: "total" }
        message: { type: string, example: "debe ser mayor o igual a 0" }